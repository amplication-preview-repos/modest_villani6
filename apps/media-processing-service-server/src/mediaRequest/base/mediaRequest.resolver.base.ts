/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MediaRequest } from "./MediaRequest";
import { MediaRequestCountArgs } from "./MediaRequestCountArgs";
import { MediaRequestFindManyArgs } from "./MediaRequestFindManyArgs";
import { MediaRequestFindUniqueArgs } from "./MediaRequestFindUniqueArgs";
import { CreateMediaRequestArgs } from "./CreateMediaRequestArgs";
import { UpdateMediaRequestArgs } from "./UpdateMediaRequestArgs";
import { DeleteMediaRequestArgs } from "./DeleteMediaRequestArgs";
import { MediaRequestService } from "../mediaRequest.service";
@graphql.Resolver(() => MediaRequest)
export class MediaRequestResolverBase {
  constructor(protected readonly service: MediaRequestService) {}

  async _mediaRequestsMeta(
    @graphql.Args() args: MediaRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MediaRequest])
  async mediaRequests(
    @graphql.Args() args: MediaRequestFindManyArgs
  ): Promise<MediaRequest[]> {
    return this.service.mediaRequests(args);
  }

  @graphql.Query(() => MediaRequest, { nullable: true })
  async mediaRequest(
    @graphql.Args() args: MediaRequestFindUniqueArgs
  ): Promise<MediaRequest | null> {
    const result = await this.service.mediaRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MediaRequest)
  async createMediaRequest(
    @graphql.Args() args: CreateMediaRequestArgs
  ): Promise<MediaRequest> {
    return await this.service.createMediaRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MediaRequest)
  async updateMediaRequest(
    @graphql.Args() args: UpdateMediaRequestArgs
  ): Promise<MediaRequest | null> {
    try {
      return await this.service.updateMediaRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MediaRequest)
  async deleteMediaRequest(
    @graphql.Args() args: DeleteMediaRequestArgs
  ): Promise<MediaRequest | null> {
    try {
      return await this.service.deleteMediaRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MediaRequest as PrismaMediaRequest } from "@prisma/client";

export class MediaRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MediaRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mediaRequest.count(args);
  }

  async mediaRequests<T extends Prisma.MediaRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaRequestFindManyArgs>
  ): Promise<PrismaMediaRequest[]> {
    return this.prisma.mediaRequest.findMany<Prisma.MediaRequestFindManyArgs>(
      args
    );
  }
  async mediaRequest<T extends Prisma.MediaRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaRequestFindUniqueArgs>
  ): Promise<PrismaMediaRequest | null> {
    return this.prisma.mediaRequest.findUnique(args);
  }
  async createMediaRequest<T extends Prisma.MediaRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaRequestCreateArgs>
  ): Promise<PrismaMediaRequest> {
    return this.prisma.mediaRequest.create<T>(args);
  }
  async updateMediaRequest<T extends Prisma.MediaRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaRequestUpdateArgs>
  ): Promise<PrismaMediaRequest> {
    return this.prisma.mediaRequest.update<T>(args);
  }
  async deleteMediaRequest<T extends Prisma.MediaRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaRequestDeleteArgs>
  ): Promise<PrismaMediaRequest> {
    return this.prisma.mediaRequest.delete(args);
  }
}

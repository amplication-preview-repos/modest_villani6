/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MediaRequestService } from "../mediaRequest.service";
import { MediaRequestCreateInput } from "./MediaRequestCreateInput";
import { MediaRequest } from "./MediaRequest";
import { MediaRequestFindManyArgs } from "./MediaRequestFindManyArgs";
import { MediaRequestWhereUniqueInput } from "./MediaRequestWhereUniqueInput";
import { MediaRequestUpdateInput } from "./MediaRequestUpdateInput";

export class MediaRequestControllerBase {
  constructor(protected readonly service: MediaRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MediaRequest })
  async createMediaRequest(
    @common.Body() data: MediaRequestCreateInput
  ): Promise<MediaRequest> {
    return await this.service.createMediaRequest({
      data: data,
      select: {
        createdAt: true,
        data: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MediaRequest] })
  @ApiNestedQuery(MediaRequestFindManyArgs)
  async mediaRequests(@common.Req() request: Request): Promise<MediaRequest[]> {
    const args = plainToClass(MediaRequestFindManyArgs, request.query);
    return this.service.mediaRequests({
      ...args,
      select: {
        createdAt: true,
        data: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MediaRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mediaRequest(
    @common.Param() params: MediaRequestWhereUniqueInput
  ): Promise<MediaRequest | null> {
    const result = await this.service.mediaRequest({
      where: params,
      select: {
        createdAt: true,
        data: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MediaRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMediaRequest(
    @common.Param() params: MediaRequestWhereUniqueInput,
    @common.Body() data: MediaRequestUpdateInput
  ): Promise<MediaRequest | null> {
    try {
      return await this.service.updateMediaRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          data: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MediaRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMediaRequest(
    @common.Param() params: MediaRequestWhereUniqueInput
  ): Promise<MediaRequest | null> {
    try {
      return await this.service.deleteMediaRequest({
        where: params,
        select: {
          createdAt: true,
          data: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

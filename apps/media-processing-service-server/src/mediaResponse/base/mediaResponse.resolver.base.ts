/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MediaResponse } from "./MediaResponse";
import { MediaResponseCountArgs } from "./MediaResponseCountArgs";
import { MediaResponseFindManyArgs } from "./MediaResponseFindManyArgs";
import { MediaResponseFindUniqueArgs } from "./MediaResponseFindUniqueArgs";
import { CreateMediaResponseArgs } from "./CreateMediaResponseArgs";
import { UpdateMediaResponseArgs } from "./UpdateMediaResponseArgs";
import { DeleteMediaResponseArgs } from "./DeleteMediaResponseArgs";
import { MediaResponseService } from "../mediaResponse.service";
@graphql.Resolver(() => MediaResponse)
export class MediaResponseResolverBase {
  constructor(protected readonly service: MediaResponseService) {}

  async _mediaResponsesMeta(
    @graphql.Args() args: MediaResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MediaResponse])
  async mediaResponses(
    @graphql.Args() args: MediaResponseFindManyArgs
  ): Promise<MediaResponse[]> {
    return this.service.mediaResponses(args);
  }

  @graphql.Query(() => MediaResponse, { nullable: true })
  async mediaResponse(
    @graphql.Args() args: MediaResponseFindUniqueArgs
  ): Promise<MediaResponse | null> {
    const result = await this.service.mediaResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MediaResponse)
  async createMediaResponse(
    @graphql.Args() args: CreateMediaResponseArgs
  ): Promise<MediaResponse> {
    return await this.service.createMediaResponse({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MediaResponse)
  async updateMediaResponse(
    @graphql.Args() args: UpdateMediaResponseArgs
  ): Promise<MediaResponse | null> {
    try {
      return await this.service.updateMediaResponse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MediaResponse)
  async deleteMediaResponse(
    @graphql.Args() args: DeleteMediaResponseArgs
  ): Promise<MediaResponse | null> {
    try {
      return await this.service.deleteMediaResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MediaResponse as PrismaMediaResponse } from "@prisma/client";

export class MediaResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MediaResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mediaResponse.count(args);
  }

  async mediaResponses<T extends Prisma.MediaResponseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaResponseFindManyArgs>
  ): Promise<PrismaMediaResponse[]> {
    return this.prisma.mediaResponse.findMany<Prisma.MediaResponseFindManyArgs>(
      args
    );
  }
  async mediaResponse<T extends Prisma.MediaResponseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaResponseFindUniqueArgs>
  ): Promise<PrismaMediaResponse | null> {
    return this.prisma.mediaResponse.findUnique(args);
  }
  async createMediaResponse<T extends Prisma.MediaResponseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaResponseCreateArgs>
  ): Promise<PrismaMediaResponse> {
    return this.prisma.mediaResponse.create<T>(args);
  }
  async updateMediaResponse<T extends Prisma.MediaResponseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaResponseUpdateArgs>
  ): Promise<PrismaMediaResponse> {
    return this.prisma.mediaResponse.update<T>(args);
  }
  async deleteMediaResponse<T extends Prisma.MediaResponseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MediaResponseDeleteArgs>
  ): Promise<PrismaMediaResponse> {
    return this.prisma.mediaResponse.delete(args);
  }
}

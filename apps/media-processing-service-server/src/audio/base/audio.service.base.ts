/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Audio as PrismaAudio } from "@prisma/client";

export class AudioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AudioCountArgs, "select">): Promise<number> {
    return this.prisma.audio.count(args);
  }

  async audioItems<T extends Prisma.AudioFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioFindManyArgs>
  ): Promise<PrismaAudio[]> {
    return this.prisma.audio.findMany<Prisma.AudioFindManyArgs>(args);
  }
  async audio<T extends Prisma.AudioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioFindUniqueArgs>
  ): Promise<PrismaAudio | null> {
    return this.prisma.audio.findUnique(args);
  }
  async createAudio<T extends Prisma.AudioCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioCreateArgs>
  ): Promise<PrismaAudio> {
    return this.prisma.audio.create<T>(args);
  }
  async updateAudio<T extends Prisma.AudioUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioUpdateArgs>
  ): Promise<PrismaAudio> {
    return this.prisma.audio.update<T>(args);
  }
  async deleteAudio<T extends Prisma.AudioDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioDeleteArgs>
  ): Promise<PrismaAudio> {
    return this.prisma.audio.delete(args);
  }
}
